const TelegramApi = require('node-telegram-bot-api')
const token = '8046196760:AAHSMzcyFC9t_bSO76rTeSv2kBG-hGUd6zo'
const {gameOptions, againOptions} = require('./options');
const sequelize = require('./db')
const UserModel = require('./models')
const bot = new TelegramApi(token, {polling: true})

const chats = {}

const startGame = async (chatId) => {
            await bot.sendMessage(chatId, `–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –æ—Ç–≥–∞–¥–∞–π –µ–≥–æ!`)
        const randomNumber = Math.floor(Math.random() * 10)
         chats[chatId] = randomNumber; 
          await sleep(500)
         await bot.sendMessage(chatId,"–û—Ç–≥–∞–¥—ã–≤–∞–π", gameOptions )
}



const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));



const start = async () => {

    try {
        await sequelize.authenticate()
        await sequelize.sync()
    } catch (error) {
        console.log('–ü–æ–ª–æ–º–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ë–î');
        
    }

    bot.setMyCommands([
   {command: '/start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'},
    {command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'},
    {command: '/game', description: '–ò–≥—Ä–∞'},
         ]
    )





bot.on('message',  async msg => {

     const text = msg.text;
    const chatId = msg.chat.id;

       try {
         if (text === "/start") {
   await UserModel.create({chatId})
   await bot.sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", )
   return bot.sendPhoto(chatId, 'https://cdn.html.it/_DWECPGZRuSKvJ1SfR0JqFUyBto=/2212x1210/smart/filters:format(webp)/https://www.html.it/app/uploads/2024/03/react.jpeg')
    }
    
      else if (text === "/info") {
        const user = await UserModel.findOne({chatId})
        await bot.sendMessage(chatId, "–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        await sleep(1000)
        await bot.sendMessage(chatId, "–ì–æ—Ç–æ–≤–æ!");
        await bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name}, —Ç–≤–æ–π ID TG: @${msg.from.username}, –≤ –∏–≥—Ä–µ  —É —Ç–µ–±—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${user.right}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: ${user.wrong}` )
        
    }
     else if(text === "/game") {
        return startGame(chatId);
    }

    else {
        return bot.sendMessage(chatId, `–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, ${msg.from.first_name}`);
    }
    } catch (error) {
        return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –Ω–µ –ø–æ –ø–ª–∞–Ω—É');
    }

})
    bot.on('callback_query',  async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        if(data === '/again') {
             return startGame(chatId);
        }

        const user = await UserModel.findOne({chatId})

        if(data == chats[chatId]) {
            user.right += 1;
            await  bot.sendMessage(chatId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]} üî•`, againOptions )
        } else {
            user.wrong += 1;
            await bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞ –±—ã–ª–∞ ${chats[chatId]}`, againOptions)
        }
        await user.save();
    })
   

}

start()